// server.js
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const fetch = require("node-fetch");  // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç fetch –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

const app = express();
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname)));

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–µ–π (–∫–ª—é—á –∏–∑ .env)
const apiKey = process.env.OPENAI_API_KEY; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const assistantId = process.env.ASSISTANT_ID;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞
app.post("/chat", async (req, res) => {
    const userMessage = req.body.message;

    if (!userMessage) {
        return res.status(400).json({ reply: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
    }

    if (!assistantId) {
        console.error("‚ùå ASSISTANT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        return res.status(500).json({ reply: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" });
    }

    try {
        console.log("üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", userMessage);
        // –°–æ–∑–¥–∞–µ–º Thread
        const threadResponse = await fetch("https://api.openai.com/v1/threads", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apiKey}`
            }
        });
        const thread = await threadResponse.json();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Thread
        await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                role: "user",
                content: userMessage
            })
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const runResponse = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                assistant_id: assistantId
            })
        });
        const run = await runResponse.json();

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        let runStatus;
        do {
            await new Promise(resolve => setTimeout(resolve, 1000));
            const statusResponse = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs/${run.id}`, {
                headers: {
                    "Authorization": `Bearer ${apiKey}`
                }
            });
            runStatus = await statusResponse.json();
        } while (runStatus.status === "queued" || runStatus.status === "in_progress");

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
            headers: {
                "Authorization": `Bearer ${apiKey}`
            }
        });
        const messages = await messagesResponse.json();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const assistantMessage = messages.data[0].content[0].text.value;
        res.json({ reply: assistantMessage });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:", error);
        res.status(500).json({ 
            reply: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            error: error.message 
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
