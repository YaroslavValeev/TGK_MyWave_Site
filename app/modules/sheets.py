from flask import current_app
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials
from datetime import datetime
import uuid
from collections import defaultdict
from app.modules.sheets_access import get_sheet_records, SheetWrapper, get_google_sheet, append_to_sheet, SheetWrapper

def get_or_create_client_id(
        name: str,
        phone: str,
        telegram_user_id: str = ''
) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –ª–∏—Å—Ç–µ Clients.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç client_id.
    """
    try:
        sheet = get_google_sheet('Clients')

        # 1Ô∏è‚É£ –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ + —Ç–µ–ª–µ—Ñ–æ–Ω—É
        existing = sheet.find_rows(name=name, phone=phone)
        if existing:
            return existing[0][1].get("client_id")

        # 2Ô∏è‚É£ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        new_id = f"client_{int(datetime.now().timestamp())}"
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        new_row = [
            new_id,                       # client_id
            telegram_user_id or '',       # telegram_user_id
            name,                         # name
            phone,                        # phone
            '',                           # email
            'beginner',                   # level
            created_at,                   # created_at
            'web',                        # source
            'new',                        # status
            '',                           # ref_code
            created_at                    # last_active
        ]

        append_to_sheet('Clients', new_row)
        return new_id
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è client_id: {e}")

def get_sheets_service():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Sheets, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.
    –ü—É—Ç—å –∫ credentials.json –±–µ—Ä—ë–º –ª–∏–±–æ –∏–∑ config, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    creds_path = current_app.config.get("GOOGLE_SERVICE_ACCOUNT_FILE", "credentials.json")
    creds = Credentials.from_service_account_file(creds_path)
    return build('sheets', 'v4', credentials=creds)

def parse_time(time_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ 'HH:MM:SS' -> 'HH:MM', –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—É–Ω–¥—ã, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∫ –µ—Å—Ç—å."""
    try:
        return datetime.strptime(time_str, "%H:%M:%S").strftime("%H:%M")
    except ValueError:
        try:
            datetime.strptime(time_str, "%H:%M")
            return time_str
        except ValueError:
            raise ValueError(f"Invalid time format: {time_str}")

def append_row(sheet_name, values_list):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (values_list) –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞ sheet_name.
    –ü—Ä–∏–º–µ—Ä values_list: ["2025-01-01", "10:00", "–ò–≤–∞–Ω", "+79999999999"]

    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
      append_row("Client_Workouts", ["2025-01-01", "10:00", "Name", "+7..."])
    """
    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]
    body = {
        "values": [values_list]
    }

    service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range=f"{sheet_name}!A1",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body=body
    ).execute()

def get_all_records(sheet_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ª–∏—Å—Ç–∞ sheet_name –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (list of dict).
    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–∏—Å—Ç–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    """
    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–ø–ª–æ—Ç—å –¥–æ Z, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –¥–æ ZZ
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range=f"{sheet_name}!A1:Z1000"
    ).execute()

    rows = result.get("values", [])
    if not rows or len(rows) < 2:
        return []  # –ü—É—Å—Ç–æ–π –ª–∏—Å—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    headers = [h.strip().lower() for h in rows[0]]
    records = []
    for row in rows[1:]:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å {header: value} –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        row_dict = {}
        for i, val in enumerate(row):
            key = headers[i] if i < len(headers) else f"extra_{i}"
            row_dict[key] = val.strip()
        records.append(row_dict)

    return records

def get_sheet_by_name(sheet_name):
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è get_all_records, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–∑–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (list of list), –∞ –Ω–µ list of dict.
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ dict, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_all_records(sheet_name).
    """
    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]

    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range=f"{sheet_name}!A1:J1000"
    ).execute()
    return result.get('values', [])

def get_workout_by_datetime(date: str, time: str):
    """
    –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ date == YYYY‚ÄëMM‚ÄëDD –∏ time == HH:MM.
    """
    for row in get_sheet_records("Workouts"):
        if row.get("date") == date and row.get("time") == time:
            cap = int(row.get("max_capacity", 0) or 0)
            return {"workout_id": row.get("workout_id") or row.get("id"),
                    "max_capacity": cap}
    return None

def get_workout_participants(workout_id):
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—Å—Ç–µ Client_Workouts,
    –≥–¥–µ workout_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–µ (row[2]).
    """
    client_workouts = get_sheet_by_name("Client_Workouts")
    count = 0
    for row in client_workouts:
        if len(row) > 2 and row[2] == workout_id:
            count += 1
    return count

def add_client_workout(client_id: str,
                       workout_id: str,
                       date_str: str,
                       time_str: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç Client_Workouts.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π booking_id (UUID).
    """
    booking_id = str(uuid.uuid4())
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    new_booking = [
        booking_id,          # id
        client_id,           # client_id
        workout_id,          # workout_id
        date_str,            # date
        time_str,            # time
        "",                  # performance
        "",                  # feedback
        "",                  # payment_type
        "pending",           # status
        now,                 # created_at
        ""                   # client_rating
    ]

    append_row("Client_Workouts", new_booking)
    return booking_id

def add_or_update_client(telegram_user_id, name, phone, email=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –ª–∏—Å—Ç–µ "Clients".
    –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º last_active, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º.
    """
    print(f"üîÑ Checking client: {telegram_user_id}")
    clients_data = get_sheet_by_name("Clients")

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ clients_data[i][0] == telegram_user_id
    client_row = None
    for i, row in enumerate(clients_data):
        if len(row) > 0 and str(row[0]) == str(telegram_user_id):
            client_row = i
            break

    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]
    today = datetime.now().strftime("%Y-%m-%d")

    if client_row is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º last_active (–≤ –∫–æ–ª–æ–Ω–∫–µ F, —ç—Ç–æ clients_data[i][5])
        range_name = f'Clients!F{client_row + 1}'
        service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption='RAW',
            body={'values': [[today]]}
        ).execute()
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_client = [
            telegram_user_id,
            name,
            phone,
            email or "",
            "beginner", # –£—Å–ª–æ–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            today,      # last_active
            "telegram", # –∏—Å—Ç–æ—á–Ω–∏–∫
            "new",      # —Å—Ç–∞—Ç—É—Å
            "",         # –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ
            ""          # –µ—â—ë –ø–æ–ª–µ
        ]
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range='Clients!A:J',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': [new_client]}
        ).execute()

def update_workout_status(workout_id, status):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç–µ "Workouts" (–¥–æ–ø—É—Å—Ç–∏–º, –≤ –∫–æ–ª–æ–Ω–∫–µ H).
    """
    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]
    workouts = get_sheet_by_name("Workouts")

    for i, row in enumerate(workouts):
        if len(row) > 0 and row[0] == workout_id:
            # –°—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–æ–Ω–∫–µ H (index=7)
            range_name = f'Workouts!H{i+1}'
            service.spreadsheets().values().update(
                spreadsheetId=spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',
                body={'values': [[status]]}
            ).execute()
            break


def get_schedule_records():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ª–∏—Å—Ç–∞ Schedule.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏.
    """
    records = get_sheet_records('Schedule')
    if not records:
        return []
    return records


def get_booked_slots(date):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {YYYY-MM-DD HH:MM: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π}, –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤—è–∑–∫—É Client_Workouts ‚Üí Workouts:
    - –í Workouts –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –∫–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    - –í Client_Workouts –∏—â—É—Ç—Å—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    """
    client_workouts = get_all_records("Client_Workouts")
    workouts = get_sheet_records("Workouts")          # list‚Äëof‚Äëdict
    target_workouts = {w["workout_id"]: w["time"]
                       for w in workouts
                       if w.get("date") == date}
    if not workouts or not client_workouts:
        return {}

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    booked_slots = {}
    for record in client_workouts:
        workout_id = record.get("workout_id") or record.get("Workout ID") or record.get("workout ID")
        if workout_id in target_workouts:
            time = target_workouts[workout_id]
            key = f"{date} {time}"
            booked_slots[key] = booked_slots.get(key, 0) + 1

    return booked_slots


def add_workout(date_str, time_str, capacity):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É Workouts. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ workout_id).
    """
    sheet = get_google_sheet("Workouts")
    new_row = [f"{date_str} {time_str}", 90, "MyWave", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", capacity, "–Ø—Ä–æ—Å–ª–∞–≤"]
    sheet.append_row(new_row)
    return sheet.row_count


def get_available_slots(check_date=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É:
    [ {"time": ..., "available": ..., "booked": ..., "max_capacity": ...}, ... ]

    - –ß–∏—Ç–∞–µ—Ç –∏–∑ –ª–∏—Å—Ç–∞ Schedule (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ).
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    - –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ—Ç—ã, –≥–¥–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç.
    """
    import logging
    sheet = get_google_sheet("Schedule")
    current_date = check_date or datetime.now().strftime("%Y-%m-%d")
    booked_slots = get_booked_slots(current_date)
    day_of_week = datetime.strptime(current_date, "%Y-%m-%d").strftime("%A").strip().lower()

    slots = []
    logging.info(f"üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É: {current_date} ({day_of_week})")

    for row in sheet.get_all_records():
        row_day = str(row.get("day_of_week", "")).strip().lower()
        if row_day != day_of_week:
            continue

        time = str(row.get("time", "")).strip()
        capacity_raw = str(row.get("max_capacity", "")).strip()

        if not time or not capacity_raw:
            continue

        try:
            max_capacity = int(capacity_raw)
        except ValueError:
            continue

        key = f"{current_date} {time}"
        booked = booked_slots.get(key, 0)

        if booked < max_capacity:
            slots.append({
                "time": time,
                "available": max_capacity - booked,
                "max_capacity": max_capacity,
                "booked": booked
            })

    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(slots)} —Å–ª–æ—Ç–æ–≤ –Ω–∞ {day_of_week}")
    return slots


def add_workout_to_sheet(date, time, client_id):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ª–∏—Å—Ç Workouts, –∏—Å–ø–æ–ª—å–∑—É—è client_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è name –∏ phone –∏–∑ –ª–∏—Å—Ç–∞ Clients.
    """
    service = get_sheets_service()
    spreadsheet_id = current_app.config["SPREADSHEET_ID"]
    clients = get_sheet_records("Clients")

    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ client_id
    client_data = next((row for row in clients if row.get("client_id") == client_id), None)
    if not client_data:
        raise ValueError(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID '{client_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ Clients")

    name = client_data.get("name", "").strip()
    phone = client_data.get("phone", "").strip()

    if not name or not phone:
        raise ValueError("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç name –∏–ª–∏ phone")

    range_name = "Workouts!A1"
    values = [[date, time, "90", "–ó–∞–ª", "–≥—Ä—É–ø–ø–æ–≤–∞—è", "4", "–¢—Ä–µ–Ω–µ—Ä", "–∞–∫—Ç–∏–≤–Ω–æ", name, phone]]
    body = {"values": values}

    service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range=range_name,
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body=body
    ).execute()

def book_slot(date_str, time_str, name, phone):
    """
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å:
      1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
      2) –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ Workouts (–µ—Å–ª–∏ –Ω–µ—Ç)
      3) –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Client_Workouts
      4) –°–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, calendar_link) –∏–ª–∏ (False, "Error text")
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º client_id
        client_id = get_or_create_client_id(name, phone)

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        is_ok, msg = is_slot_available(date_str, time_str)
        if not is_ok:
            return (False, msg)

        # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ Workouts
        workout = get_workout_by_datetime(date_str, time_str)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º
        if not workout:
            workout_id = create_workout_if_not_exists(date_str, time_str)
            if not workout_id:
                return (False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
            workout = get_workout_by_datetime(date_str, time_str)
            if not workout:
                return (False, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            workout_id = workout["workout_id"]

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = get_workout_participants(workout_id)
        if participants >= workout["max_capacity"]:
            return (False, "–°–ª–æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        add_client_workout(client_id, workout_id, date_str, time_str)

        # 4‚Äëbis. ‚¨ÜÔ∏è –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º current_capacity
        increment_capacity(workout_id)

        # 5. –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        success, link = add_booking_to_calendar(date_str, time_str, name, phone)
        if success:
            return (True, link)
        else:
            return (False, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Calendar")

    except Exception as e:
        return (False, str(e))

def increment_capacity(workout_id: str):
    """
    +1 –∫ –∫–æ–ª–æ–Ω–∫–µ current_capacity —É —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    """
    sheet = get_google_sheet("Workouts")
    headers = sheet.values[0]
    row_idx  = None
    cap_col  = None

    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    for i, h in enumerate(headers):
        if h.strip().lower() == "current_capacity":
            cap_col = i
            break

    for r, row in enumerate(sheet.values[1:], start=2):   # A2‚Ä¶
        if row and row[0] == workout_id:                   # A‚Äë—Å—Ç–æ–ª–±–µ—Ü ‚Äî workout_id
            row_idx = r
            break

    if row_idx and cap_col is not None:
        current = int(sheet.values[row_idx-1][cap_col] or 0)
        service = get_sheets_service()
        spreadsheet_id = current_app.config["SPREADSHEET_ID"]
        service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range=f"Workouts!{chr(65+cap_col)}{row_idx}",
            valueInputOption="RAW",
            body={"values": [[current + 1]]}
        ).execute()

