from flask import Blueprint, jsonify, request, current_app, render_template
from app.extensions import csrf  
from app.forms.booking_form import BookingForm
from app.routes.calendar_routes import get_available_slots
from app.modules.booking_utils import is_slot_available, book_slot
import datetime
import logging

booking_bp = Blueprint("booking", __name__, url_prefix="/booking")


# ------------------------------------------------------------
# 1. –°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´/booking/book¬ª ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç —Å WTForms (–Ω–µ SPA)
# ------------------------------------------------------------
@booking_bp.route("/book", methods=["GET", "POST"])
def book():
    form = BookingForm()

    if form.validate_on_submit():
        date = form.date.data
        time = form.time.data
        name = form.name.data
        phone = form.phone.data

        ok, msg = is_slot_available(date, time)
        if not ok:
            return jsonify({"message": msg}), 400

        success, calendar_link = book_slot(date, time, name, phone)
        if success:
            return jsonify(
                {"message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "calendarLink": calendar_link}
            ), 200
        return jsonify({"message": "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏!"}), 500

    return render_template("book.html", form=form)


# ------------------------------------------------------------
# 2. JSON‚ÄëAPI ¬´/booking/book/api¬ª  ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è booking.js
# ------------------------------------------------------------
@booking_bp.route("/book/api", methods=["POST"])
@csrf.exempt
def book_api():
    """
    –û–∂–∏–¥–∞–µ—Ç JSON:
        {
          "date":  "YYYY‚ÄëMM‚ÄëDD",
          "time":  "HH:MM",
          "name":  "–ò–º—è",
          "phone": "+79991234567"
        }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ–≥–¥–∞ JSON, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        # --------------- –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ ---------------
        if not request.is_json:
            return (
                jsonify(
                    {"success": False, "error": "Content‚ÄëType must be application/json"}
                ),
                400,
            )

        data = request.get_json(silent=True) or {}
        current_app.logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {data}")

        required = {"date", "time", "name", "phone"}
        if not required.issubset(data):
            return (
                jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}),
                400,
            )

        booking_date: str = data["date"]
        booking_time: str = data["time"]

        # --------------- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ ---------------
        try:
            datetime.datetime.strptime(booking_date, "%Y-%m-%d")
            datetime.datetime.strptime(booking_time, "%H:%M")
        except ValueError:
            return (
                jsonify({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏"}),
                400,
            )

        # --------------- –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ---------------
        slots_by_day = get_available_slots(booking_date)  # {'thursday': [ {...}, ... ]}
        if not slots_by_day:
            return (
                jsonify({"success": False, "error": "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"}),
                400,
            )

        # get_available_slots –≤—Å–µ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç dict, –Ω–æ –∑–∞–ø–∞—Å—ë–º—Å—è fallback‚Äë–æ–º
        if isinstance(slots_by_day, dict):
            slots_list = next(iter(slots_by_day.values()), [])
        else:  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–≥–¥–∞‚Äë—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å—Ä–∞–∑—É list
            slots_list = slots_by_day

        if not any(slot.get("time") == booking_time for slot in slots_list):
            return (
                jsonify(
                    {
                        "success": False,
                        "error": "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                    }
                ),
                400,
            )

        # --------------- —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ / –∑–∞–ø–∏—Å—å ---------------
        ok, msg = is_slot_available(booking_date, booking_time)
        if not ok:
            return jsonify({"success": False, "error": msg}), 400

        success, calendar_link = book_slot(
            booking_date,
            booking_time,
            data["name"].strip(),
            data["phone"].strip(),
        )
        if not success:
            current_app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {calendar_link}")
            return jsonify({"success": False, "error": calendar_link}), 500

        current_app.logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        return (
            jsonify(
                {
                    "success": True,
                    "message": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!",
                    "calendarLink": calendar_link,
                }
            ),
            200,
        )

    # --------------- ¬´catch‚Äëall¬ª ‚Äî —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª JSON ---------------
    except Exception as e:  # pragma: no cover
        logging.exception("‚ùå –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ book_api")
        return jsonify({"success": False, "error": str(e)}), 500
