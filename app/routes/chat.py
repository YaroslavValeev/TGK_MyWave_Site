from app.services.openai import get_chat_response
from flask import Blueprint, jsonify, request, current_app, render_template
from flask_wtf.csrf import CSRFProtect
from app.models import ChatMessage

bp = Blueprint('chat', __name__, template_folder='../templates')
csrf = CSRFProtect()
csrf.exempt(bp)  # –û—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è —ç—Ç–æ–≥–æ blueprint

@bp.route("/")
def chat():
    messages = ChatMessage.query.order_by(ChatMessage.created_at.asc()).all()
    return render_template("chat.html", messages=messages)

@bp.route("/api", methods=["POST"])
def chat_handler():
    try:
        message = request.json.get('message')
        if not message:
            return jsonify({'error': 'No message provided'}), 400

        # üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
        client_id = request.headers.get("X-User-Id") or request.remote_addr

        response = get_chat_response(message, client_id=client_id)
        return jsonify({'response': response})
    except Exception as e:
        current_app.logger.error(f"OpenAI API error: {str(e)}")
        return jsonify({
            'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
        }), 500
