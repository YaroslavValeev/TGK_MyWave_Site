document.addEventListener("DOMContentLoaded", () => {
  console.log("üì¶ booking.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤");

  // ==============================
  // üîß DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
  // ==============================
  const UI = {
    bookingDateInput: document.getElementById("bookingDateInput"),
    slotButtonsContainer: document.getElementById("slotButtonsContainer"),
    confirmDateBtn: document.getElementById("confirmDateBtn"),
    confirmSlotBtn: document.getElementById("confirmSlotBtn"),
    confirmContactBtn: document.getElementById("confirmContactBtn"),
    finalConfirmBtn: document.getElementById("finalConfirmBtn"),
    bookingName: document.getElementById("bookingName"),
    bookingPhone: document.getElementById("bookingPhone"),
    confirmDetails: document.getElementById("confirmDetails"),
    homeLink: document.getElementById("home-link"),
    slotSelectHidden: document.getElementById("slotSelect"),
    calendarModal: document.getElementById("modalCalendar"),
    slotsModal: document.getElementById("modalSlots"),
    contactModal: document.getElementById("modalContact"),
    confirmModal: document.getElementById("modalConfirm"),
    modalCloseButtons: document.querySelectorAll(".close-modal"),
    openBookingButtons: document.querySelectorAll(".book-now"),
    toast: document.getElementById("toast"),
  };

  if (!UI.bookingDateInput || !UI.slotButtonsContainer) {
    console.warn("‚ö†Ô∏è booking.js –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.");
    return;
  }

  function handleDateConfirmation() {
    const selectedDate = document.getElementById("bookingDateInput").value;
    if (!selectedDate) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!");
      return;
    }
  
    console.log("üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:", selectedDate);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞—Ç—É
    if (UI.confirmDateBtn) {
      UI.confirmDateBtn.click();
    }

    const slotsModal = document.getElementById("modalSlots");
    if (slotsModal) {
      document.querySelectorAll(".modal").forEach((m) => m.classList.add("hidden"));
      slotsModal.classList.remove("hidden");
    }
  }
  
// üîÑ Flatpickr (–≤—ã–±–æ—Ä –¥–∞—Ç—ã)
  // ==============================
  flatpickr(UI.bookingDateInput, {
    locale: "ru",
    dateFormat: "Y-m-d",
    onChange: function (selectedDates, dateStr) {
      if (!dateStr) return;

      // üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (selectedDates[0] < today) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É");
        return;
      }

      console.log("üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:", dateStr);
      updateSlotOptions(dateStr); // ‚úÖ –æ–¥–∏–Ω –≤—ã–∑–æ–≤
    }
  });
  // ==============================
  // üîß –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  // ==============================

  const hideAllModals = () => {
    [UI.calendarModal, UI.slotsModal, UI.contactModal, UI.confirmModal].forEach((m) => {
      if (m) m.classList.add("hidden");
    });
  };

  const showModal = (modal) => {
    hideAllModals();
    modal?.classList.remove("hidden");
  };

  const showToast = (message) => {
    UI.toast.textContent = message;
    UI.toast.classList.remove("hidden");
    setTimeout(() => UI.toast.classList.add("hidden"), 5000);
  };

  const setActiveSlotButton = (btn) => {
    UI.slotButtonsContainer.querySelectorAll("button").forEach((b) => b.classList.remove("active"));
    btn.classList.add("active");
  };

  const clearSlotButtons = () => {
    UI.slotButtonsContainer.innerHTML = "";
    UI.confirmSlotBtn.disabled = true;
  };

  // ==============================
  // üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
  // ==============================
  window.updateSlotOptions = async function(dateStr) {
    clearSlotButtons();

    if (!dateStr) {
      UI.slotButtonsContainer.innerHTML = "<div class='text-gray-500'>–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</div>";
      return;
    }

    try {
      const res = await fetch(`/api/calendar/available_slots/${dateStr}`);
      const slotsData = await res.json();

      const date = Object.keys(slotsData)[0];
      const slots = slotsData[date];

      if (!slots || slots.length === 0) {
        UI.slotButtonsContainer.innerHTML = "<div class='text-gray-500'>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</div>";
        return;
      }

      // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      const uniqueSlots = new Set();
      slots.forEach(slot => {
        const slotKey = `${slot.time}_${slot.available}_${slot.max_capacity}`;
        if (!uniqueSlots.has(slotKey)) {
          uniqueSlots.add(slotKey);
          const btn = document.createElement("button");
          btn.type = "button";
          btn.className = "slot-btn";
          btn.textContent = `${slot.time} (${slot.available}/${slot.max_capacity})`;
          btn.addEventListener("click", () => {
            UI.slotSelectHidden.value = slot.time;
            setActiveSlotButton(btn);
            UI.confirmSlotBtn.disabled = false;
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
            if (UI.confirmSlotBtn) {
              UI.confirmSlotBtn.click();
            }
          });
          UI.slotButtonsContainer.appendChild(btn);
        }
      });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤:", e);
      UI.slotButtonsContainer.innerHTML = "<div class='text-red-500'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤</div>";
    }
  }

  // ==============================
  // üßæ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  // ==============================
  function confirmContactStep() {
    const name = UI.bookingName.value.trim();
    const phone = UI.bookingPhone.value.trim();
    const time = UI.slotSelectHidden.value;
    const date = UI.bookingDateInput.value;

    if (!name || !phone || !time || !date) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return false;
    }

    if (!/^\+?\d{10,15}$/.test(phone)) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (¬´+7‚Ä¶¬ª).");
      return false;
    }

    UI.confirmDetails.textContent = `–î–∞—Ç–∞: ${date}, –í—Ä–µ–º—è: ${time}\n–ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
    return true;
  }

  // ==============================
  // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
  // ==============================
  async function submitBooking() {
    const payload = {
      date: UI.bookingDateInput.value,
      time: UI.slotSelectHidden.value,
      name: UI.bookingName.value.trim(),
      phone: UI.bookingPhone.value.trim(),
    };

    try {
      const res = await fetch("/booking/book/api", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]')?.content || '',
        },
        body: JSON.stringify(payload),
      });

      const result = await res.json();

      if (result.success) {
        hideAllModals();
        showToast("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
      } else {
        showToast(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏:", err);
      showToast("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
  // ==============================
  // üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  // ==============================

  UI.openBookingButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      if (btn.disabled) return;          // üîí –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      btn.disabled = true;
      setTimeout(() => (btn.disabled = false), 1000);

      console.log("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'");
      showModal(UI.calendarModal);
    });
  });

  if (UI.confirmDateBtn) {
    UI.confirmDateBtn.addEventListener("click", handleDateConfirmation);
  }


  if (UI.confirmSlotBtn) {
    UI.confirmSlotBtn.addEventListener("click", () => {
      const selectedSlot = UI.slotSelectHidden.value;
      if (!selectedSlot) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç");
        return;
      }

      showModal(UI.contactModal);
    });
  }

  if (UI.confirmContactBtn) {
    UI.confirmContactBtn.addEventListener("click", () => {
      if (confirmContactStep()) {
        showModal(UI.confirmModal);
      }
    });
  }

  if (UI.finalConfirmBtn) {
    UI.finalConfirmBtn.addEventListener("click", () => {
      submitBooking();
    });
  }

  // ==============================
  // ‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ ‚úñ –∫–Ω–æ–ø–∫–µ
  // ==============================
  UI.modalCloseButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      hideAllModals();
    });
  });

  // ==============================
  // ‚éã –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
  // ==============================
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hideAllModals();
    }
  });


  // ==============================
  // ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
  // ==============================
  console.log("üìÖ booking.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
});
